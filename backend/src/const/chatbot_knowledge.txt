--- PAGE 7 ---
### Chapter 1 Introduction

#### 1.1 Introduction

##### In today's digital age, the importance of having an online presence through a website cannot be overstated. Whether for businesses, professionals, or individuals, a website serves as a gateway to the digital world, offering a platform for sharing information, engaging with audiences, and conducting various activities online. However, despite the widespread adoption of websites, the process of creating one remains a significant challenge for many. This challenge is particularly pronounced among individuals lacking technical expertise, who may find themselves overwhelmed by the complexities of website development, including coding, design, and hosting. Consequently, there is a pressing need for solutions that democratize website creation, making it accessible to everyone, irrespective of their technical background. In response to this need, our project aims to revolutionize the website development process by leveraging advanced technologies and user-centric design principles to create a platform that empowers users of all skill levels to effortlessly create and customize websites.

#### 1.2 Problem in Brief

##### In today's digital landscape, the significance of having a website cannot be overstated. It serves as a virtual storefront, a platform for sharing ideas, or a means of showcasing one's expertise to a vast online audience.

##### Despite the ubiquity of websites, the process of creating one remains a daunting challenge for many. This challenge stems from a lack of technical knowledge or expertise, coupled with the complexity inherent in website development. Even individuals with a basic understanding of technology often find themselves overwhelmed by the intricacies of coding, design, and hosting.

##### Consequently, a significant portion of the population is excluded from harnessing the benefits of an online presence due to these barriers. This creates a pressing need for solutions that democratize website creation, making it accessible to everyone, regardless of their technical background.

##### By addressing this gap, we can empower individuals and businesses alike to establish a compelling online presence, thereby fostering greater connectivity and opportunities in the digital realm.

##### 7

--- PAGE 8 ---
#### 1.3 Aim and Objectives

##### 1.3.1. Aim

##### The aim of our project is to democratize website creation by providing a user-friendly platform that allows individuals with limited technical expertise to easily create and customize websites. By leveraging advanced technologies such as LangChain and responsive user interfaces built on React, our aim is to simplify the website development process, enabling users to articulate their requirements through natural language input and interact seamlessly with the system. Ultimately, our goal is to empower users from diverse backgrounds to effortlessly create personalized websites without the need for extensive technical knowledge or assistance.

##### 1.3.2. Objectives

##### 1.3.2.1. Simplify User Interaction:

##### Our overarching objective is to revolutionize the website creation process by harnessing LangChain's advanced natural language processing capabilities. Through our innovative approach, we seek to simplify the user input process, enabling individuals without technical expertise to effortlessly convey their website requirements using everyday language. By eliminating the barrier of technical jargon, we aim to empower users to articulate their needs effectively, ultimately fostering a more intuitive and seamless website development experience.

##### 1.3.2.2. Enhance Accessibility:

##### Our aim is to elevate accessibility by implementing a responsive user interface driven by React, thereby ensuring seamless compatibility across diverse devices and screen dimensions. Through this initiative, our primary objective is to democratize access to the platform, empowering users to engage with it effortlessly regardless of their device preferences. This dedication to inclusivity and usability underscores our commitment to providing an enriched experience that caters to the diverse needs and preferences of our users.

##### 1.3.2.3. Improve User Experience:

##### Our approach involves closely scrutinizing the responses provided by users to the questions posed by the system via the chatbot interface. We meticulously examine these interactions to identify instances where users may have misunderstood or misinterpreted the questions presented to them. By pinpointing areas of confusion or ambiguity in user responses, we can discern

##### 8

--- PAGE 9 ---
##### patterns and trends indicative of potential misunderstandings. This granular analysis allows us to refine the dialogue flow and adjust the wording of questions to enhance clarity and comprehension for users. Through this iterative process of evaluating user responses and refining the system's dialogue, we aim to minimize instances of misunderstanding and optimize the overall user experience.

##### 1.3.2.4. Facilitate Code Management:

##### Our objective is to streamline the process of managing and customizing code by implementing a meticulously organized folder structure and ensuring the clarity of individual files. By automatically arranging the code generated by Gemini into well-structured directories and files, we seek to provide users with a seamlessly organized repository for their website assets. This meticulous organization facilitates easy navigation and modification, empowering users to tailor their websites to their exact specifications with minimal effort. Ultimately, our goal is to enhance the flexibility and usability of the platform, culminating in a more intuitive and efficient website development experience for users.

#### 1.4 Proposed Solution

##### Our proposed solution aims to address the challenges faced by individuals lacking technical expertise in website creation by integrating advanced technologies such as LangChain and responsive user interfaces built on React. Through the seamless integration of these technologies, we endeavor to enhance user interaction and streamline the website development process, ultimately democratizing website creation for users of all skill levels.

##### With LangChain's advanced natural language processing capabilities, users can effortlessly convey their website requirements using everyday language, eliminating the need for technical jargon and simplifying the input process. This intuitive approach to gathering user input enhances accessibility and empowers users to articulate their needs effectively, laying the groundwork for a tailored website development experience.

##### Complementing LangChain, our system employs a responsive user interface powered by React, ensuring a seamless and intuitive experience across various devices and screen sizes. By dynamically adapting to different environments, including desktops, tablets, and smartphones,

##### 9

--- PAGE 10 ---
##### the interface enhances accessibility and usability, enabling users to engage with the platform comfortably and efficiently.

##### Furthermore, our solution adopts a data-driven approach to improve user experience, leveraging insights derived from user interactions to refine dialogue flows and enhance system responsiveness. Through comprehensive analysis of user input statistics, we identify areas for improvement and implement adjustments to optimize usability and streamline the website creation process.

##### Upon receiving code generated by Gemini, our system automatically organizes the code into well-structured files and directories, facilitating ease of management and customization. This organized approach enhances code readability and accessibility, empowering users to navigate and modify the code effortlessly, thereby contributing to an improved overall user experience.

##### In summary, our proposed solution combines advanced technologies, user-centric design principles, and data-driven insights to revolutionize website development. By prioritizing accessibility, usability, and customization, we aim to empower users to create and customize websites with ease and efficiency, fostering a more inclusive and accessible digital landscape.

##### 10

--- PAGE 11 ---


#### 1.6 Summary

##### 11

--- PAGE 12 ---
##### In summary, our project endeavors to address the challenges inherent in website creation by providing a user-friendly platform that simplifies the process and enhances accessibility for individuals lacking technical expertise. Through the integration of advanced technologies such as LangChain and responsive user interfaces built on React, our solution aims to streamline the website development process, enabling users to articulate their requirements naturally and interact seamlessly with the system. By prioritizing user experience, data-driven insights, and meticulous code management, we seek to empower users to create personalized websites with ease and efficiency. Ultimately, our goal is to democratize website creation, fostering greater inclusivity and accessibility in the digital landscape.

##### 12

--- PAGE 13 ---
### Chapter 2 Literature Review

#### 2.1 Introduction

##### The growing demand for web applications across various domains fuels the need for user-friendly development tools. AgentSmiths emerges as a revolutionary web app builder aiming to empower users of all skill levels to create custom applications. By leveraging cutting-edge natural language processing (NLP) and code generation capabilities, AgentSmiths promises a paradigm shift in web development, democratizing the process and enabling even non-technical users to bring their ideas to life. This literature review explores existing web app builders, compares them to AgentSmiths, and highlights its unique features and potential impact

#### 2.2 Related Systems and Comparison

##### Several web app builders cater to diverse user needs, offering varying levels of complexity and functionality. Here's a comparison of AgentSmiths with prominent systems.

##### 1. Hocoos AI Website Builder (https://hocoos.com/online-store-ai-builder/) Hocoos leverages AI to generate basic websites and online stores. While user-friendly, its focus on pre-built templates limits customization and complex functionalities. Target Users: Primarily focuses on building online stores with its AI-powered store builder. Strengths: Offers user-friendly interface, pre-built templates, and AI-assisted store setup. Limitations: Less flexibility for building non-eCommerce applications compared to Agent Smith .

##### 2. Wix (https://www.wix.com/) Wix provides a drag-and-drop interface for building websites with various features and templates. However, its visual approach can limit code control and flexibility for advanced users Target Users: Caters to a broad audience, from beginners to designers and developers. Strengths: Extensive template library, drag-and-drop interface, and app integrations. Limitations: Limited flexibility for code customization and complex functionalities compared to Agent Smith.

##### 3. Squarespace (https://www.squarespace.com/) Squarespace offers stylish website templates and intuitive editing tools, catering primarily to creators and small businesses. Its focus on design aesthetics may not suit developers seeking deep customization.

##### 13

--- PAGE 14 ---
##### Target Users: Geared towards individuals and businesses seeking visually appealing websites. Strengths: Stylish templates, mobile optimization, and marketing tools. Limitations: Lacks advanced features and customizability offered by Agent Smith.

##### 4. Bubble.io (https://bubble.io/) Bubble allows building web applications visually without coding. While powerful for rapid prototyping, its visual interface can hinder complex logic and scalability for larger applications. Target Users: Primarily targets developers and entrepreneurs building complex web applications. Strengths: Enables visual programming and building custom functionalities. Limitations: Requires some coding knowledge and can be overwhelming for beginners compared to Agent Smith's AI-powered approach

##### Agent Smith's Advantages:

##### 1. Natural Language Interface for All Skill Levels: Agent Smith empowers users of all backgrounds and technical proficiencies to generate web applications. It achieves this by enabling them to specify their business requirements in a natural language manner, similar to explaining their desired system to another person in real-world software development. This eliminates the need for complex coding knowledge, democratizing web development for a wider audience.

##### 2. Unmatched Versatility and Flexibility: Agent Smith boasts unparalleled domain and use case support. It can cater to virtually any domain or functionality that the user can envision, regardless of complexity. This ensures a user-tailored, custom experience that caters to unique needs and objectives .

##### 3. Collaborative Development with AI-powered Efficiency: Agent Smith incorporates cutting-edge collaborative development techniques, leveraging a multi-agent system. Each agent within the system plays a specific role in the Software Development Lifecycle (SDLC), powered by a large language model (LLM). This collaboration facilitates the breakdown of complex tasks into smaller, more manageable components, enabling efficient and accurate solutions.

##### 14

--- PAGE 15 ---
#### 2.3 Summary

##### The landscape of web app builders is evolving, and AgentSmiths presents a groundbreaking approach with its NLP-driven, collaborative development paradigm. By empowering users of all skill levels to create custom applications, AgentSmiths has the potential to democratize web development and foster innovation across various domains. While existing systems like Hocoos, Wix, Squarespace, and Bubble.io offer varying functionalities, they are often limited in scope, user accessibility, and flexibility. AgentSmiths' unique combination of NLP, collaborative development, and domain/use case agnosticism positions it as a disruptive force in the market.

##### 15

--- PAGE 16 ---
### Chapter 3 proposed Solution

#### 3.1 Introduction

##### In the ever-evolving landscape of web application development, the demand for intuitive platforms that bridge the gap between technical complexity and user accessibility is paramount. Enter Agentsmiths, a pioneering solution poised to revolutionize the way web applications are conceived, designed, and deployed.

##### Agentsmiths embodies a visionary approach, harnessing cutting-edge technologies such as Gemini Pro APIs and LangChain to empower users of all proficiency levels. Our mission is clear: to democratize web application development, making it effortless for individuals to create tailored digital experiences without the encumbrance of intricate coding processes.

##### This proposed solution is not merely a product but a paradigm shift in the field, offering a comprehensive suite of tools and functionalities to streamline the development journey. From the inception of an idea to the realization of a fully-functional web application, Agentsmiths provides the infrastructure, intelligence, and support necessary to navigate every stage of the process seamlessly.

##### At its core, Agentsmiths encompasses three key components: an AI-driven web page creation software fueled by Gemini AI, a research project management tool, and a robust Multi-Agent System facilitating collaborative code generation, and quality assurance. Leveraging FastApi, React for frontend dynamism, Python for backend robustness, and MongoDB for scalable data storage, our solution embodies versatility and reliability.

##### User experience lies at the heart of Agentsmiths. Through a dynamic web UI and tailored questionnaires, users are guided through the application creation process, ensuring their vision is realized with precision. With a focus on security and integrity, user authentication, registration processes, and data management are fortified by a User Session Manager and cloud-based storage solutions.

##### Incorporating email services for additional validation measures underscores our commitment to delivering a secure and reliable environment for our users.

##### 16

--- PAGE 17 ---
##### Agentsmiths isn't just about building web applications; it's about empowering individuals to unlock their creativity and bring their digital aspirations to life effortlessly. Join us on this transformative journey as we redefine the future of web application development together.

#### 3.2 Frontend technologies

##### 1. React JS: Powering the frontend, React facilitates dynamic and interactive user interfaces through its component-based architecture and virtual DOM.

##### 2. Styled components 3. Material ui

#### 3.3 Backend technologies

##### 1. Python: Used for backend development, Python offers a robust and versatile environment for implementing server-side logic, handling data processing, and managing business logic.

##### 2. Fast-Api: a lightning-fast web framework written in Python. It excels in creating modern, high-performance APIs with features like automatic data validation and automatic documentation generation. Its focus on developer experience makes it a joy to use

##### 3. Langchain: seamlessly connects various AI models and tools into powerful workflows called "runnables". Think of it as Legos for your AI projects, letting you chain together tasks like text generation, translation, or analysis with ease

#### 3.4 Database technologies

##### 17

--- PAGE 18 ---
##### 1. MongoDB: MongoDB is a NoSQL database known for its document-oriented structure, which allows for flexible and schema-less data storage. It is highly scalable, capable of handling large volumes of data and high traffic loads, making it suitable for web applications with varying data requirements. MongoDB integrates seamlessly with the MERN stack, providing a reliable and efficient data storage solution for backend operations

#### 3.5 Software development Process Model

##### Agile Methodology:

* ##### Agile is an iterative and incremental approach to software development that emphasizes

##### flexibility, collaboration, and customer feedback.

* ##### It involves breaking down the development process into small, manageable increments

##### called "sprints," typically lasting 1-4 weeks.

* ##### Agile prioritizes delivering working software frequently, allowing for continuous

##### improvement and adaptation to changing requirements.

#### 3.6 User Role, Input-process -Output of the System

##### User Role:

#####

* ##### Users interact with the system at various stages of web application development. They may include:

#####

* ##### Novice users with limited technical expertise.

* ##### Intermediate users familiar with web development concepts.

* ##### Expert users proficient in coding and software development.

* ##### Input-Process-Output of the System:

##### Input:

##### User Requirements:

* ##### Users input their requirements and preferences for the web application they want to

##### create. This could include design preferences, functionality requirements, and content specifications.

##### 18

--- PAGE 19 ---
#####

* ##### User Authentication Data:

* ##### Input of user credentials (e.g., username, password) for authentication and authorization

##### purposes. Process:

##### User Authentication and Registration:

##### Process: The system verifies user credentials and authenticates the user if the provided information matches the records in the database. Upon successful authentication, users are granted access to their respective accounts. Output: Successful login or registration confirmation message. Access to the system's functionalities.

##### Dynamic Web Page Creation:

##### Process: Users interact with the dynamic web UI to specify the type of webpage they desire through tailored questions. The Response Processor interprets and dissects user requirements, with the Response Validator ensuring the integrity of user responses. Output: Generated web pages tailored to user specifications.

##### Multi-Agent System Code Generation:

##### Process: Agents within the Multi-Agent System collaboratively engage in code generation, testing, and quality assurance. GeminiAI-powered agents adeptly generate CSS, HTML, and JavaScript code snippets, subsequently processed by a Formatter to eliminate redundancies. Output: Organized and optimized code snippets stored in the MongoDB database, forming the backend structure of the web application.

##### User Profile Management:

##### Process: Upon registration, user profiles are established, and users can choose between a standard registration process or expedited signup using their email address, requiring additional details. Users can manage their profiles and preferences. Output: Updated user profiles and preferences stored in the database.

##### Output:

##### 19

--- PAGE 20 ---
##### Generated Web Pages: Fully functional web pages tailored to user specifications, ready for deployment and

##### hosting. Backend Code Structure:

##### Organized and optimized backend code stored in the MongoDB database, generated by the Multi-Agent System. User Profile Updates:

##### Updated user profiles and preferences reflecting any changes made by the user during profile management.

#### 3.7 processes

##### Key processes involved

##### 1. User Authentication and Registration:

##### Process: Users authenticate themselves by providing credentials (username, password) or register for a new account if they're new to the system. Sub-processes: Validation of user credentials. Registration form submission and validation. Storage of user authentication data in the database.

##### 2. Dynamic Web Page Creation:

##### Process: Users interact with the dynamic web UI to specify their desired webpage characteristics through tailored questions. Sub-processes: User input processing and interpretation. Response validation to ensure user requirements are feasible and consistent. Generation of web page templates and structures based on user inputs .

##### 3. Multi-Agent System Code Generation:

##### Process: Agents within the Multi-Agent System collaborate to generate CSS, HTML, and JavaScript code snippets based on user specifications. Sub-processes:

##### 20

--- PAGE 21 ---
##### GeminiAI-powered code generation. Code formatting and optimization to eliminate redundancies. Organization and storage of generated code in the MongoDB database.

##### 4. User Profile Management:

##### Process: Users manage their profiles, including updating personal information, preferences, and account settings. Sub-processes: Profile creation for new users. Profile update requests processing. Storage and retrieval of user profile data.

##### 5. Data Submission and Retrieval:

##### Process: Users submit data through the frontend UI, which is then processed, transmitted to the backend, and stored in the database. User requests trigger data retrieval from the database. Sub-processes: Frontend data submission handling. Backend data processing and storage. Database query execution and result retrieval.

##### 6. Email Confirmation and Validation:

##### Process: Email services are integrated into the system for additional confirmation and validation measures during user registration and certain actions. Sub-processes: Sending email confirmation links upon registration. Verification of email addresses for additional security measures. Notification emails for certain user actions or system events.

#### 3.8 Our Approach

##### Our approach to developing the proposed solution combines cutting-edge technologies, user-centric design principles, and agile methodologies to deliver a seamless and empowering web application development experience. Here's a breakdown of our approach:

##### 21

--- PAGE 22 ---
##### Technology Integration: We leverage advanced technologies such as Gemini Pro APIs and LangChain to empower users with intuitive tools for web application development. By integrating these technologies, we ensure that our platform remains at the forefront of innovation, offering users access to state-of-the-art capabilities.

##### User-Centric Design: Our solution prioritizes the needs and preferences of users, regardless of their technical expertise. Through dynamic web UIs, tailored questionnaires, and intuitive workflows, we guide users through the application creation process, making it accessible and effortless for novices and experts alike.

##### Agile Methodology: We adopt Agile methodologies to drive iterative and incremental development, allowing for rapid prototyping, continuous feedback, and adaptation to changing requirements. By breaking down development tasks into small, manageable increments, we ensure that our solution remains flexible, responsive, and aligned with user expectations throughout the development lifecycle.

##### Collaborative Development: We foster collaboration between cross-functional teams, including developers, designers, and stakeholders, to ensure the success of our solution. By promoting transparency, communication, and shared ownership of project goals, we harness the collective expertise and insights of our team members to deliver high-quality results.

##### Continuous Improvement: Our approach emphasizes continuous improvement and refinement based on user feedback, market trends, and technological advancements. By soliciting and incorporating user input at every stage of the development process, we iterate upon our solution iteratively, ensuring that it evolves to meet the evolving needs of our users and the industry at large.

##### 22

--- PAGE 23 ---
### Chapter 4 Analysis and Design

#### 4.1 Introduction

##### In this chapter, we embark on a comprehensive exploration of the analysis and design aspects of the AgentSmiths project. Beginning with an overview of the objectives and methodologies employed, we delve into the detailed analysis of functional requirements, identification of key system features, and delineation of essential modules or components.

##### Throughout this phase, emphasis is placed on understanding user needs, defining system behaviors, and establishing the architectural framework necessary for the successful realization of the envisioned solution. By adopting systematic analysis and design methodologies, we aim to ensure alignment with project objectives, adherence to best practices, and the creation of a robust blueprint for implementation.

#### 4.2 Analysis

##### 4.2.1 Functional Requirements

##### User Session Handling User Login Stimulus : User provides email address and AgentSmiths account password. Response : System validates user credentials against existing user data and grants access to the user account. Otherwise display notification that the email is invalid or password does not match. User Sign Up Stimulus : User provides required information in the sign up form. Response : The System validates entered information and stores user data in the system. If the user has provided incorrect/ invalid/ null information, display notification asking to fix the issue.

##### Password Recovery Stimulus : User clicks the password recovery option. Response : System sends a recovery link to the user's email that allows the user to reset the password.

##### Requirement Identification Get User Responses

##### 23

--- PAGE 24 ---
##### Stimulus : User answers the questions asked by the system. Response : System stores the responses provided by the user.

##### Identify Requirements Stimulus : Database and stores data provided by the user. Response : System filters and provides the required information to Agents.

##### Website Generation Generating the Codes Stimulus : Information for the website is provided to the large language model. Response : large language model generates a response including the codes for the website.

##### Extracting the Codes Stimulus : Response provided by the large language model is provided to a filtering agent. Response : Code segments are extracted from the response and stored in packages.

##### Provide Website Source Code Stimulus : User approves the preview of the website. Response : Files are sent to the user interface so that the user can download

##### Website Modification Display Preview of the website Stimulus : User answers questions asked by the system through the system’s chat interface. Response : If the requirements are clear, the system generates a website that suits user requirements. Otherwise ask more questions until requirements are clarified.

##### Modify User Interface Stimulus : User makes changes to the generated website’s user interface. Response : The system communicates the changes made by the user to the large language model.

##### Request Additional Features (Wish to have) Stimulus : User uses a chat interface to request new features for the generated website. Response : The system communicates the requests made by the user to the large language model.

##### Generate Modified Website Stimulus : User confirms changes made to the user interface and the requests made. Response : The system modifies the source code by including the modifications requested by the user.

##### 24

--- PAGE 25 ---
##### Maintaining User Activity History Create User Profile Page Stimulus : User provides information required to sign up. Response : Create user profile with user information and activity data.

##### Displaying Past Activity Data Stimulus : User initiates creation of a new website. Response : System provides users with links to demonstrations of each website that belongs to the specific user through user profile.

##### Open Demonstrations of Websites Stimulus : User selects website link. Response : System displays the demonstration of the relevant website.

##### 25

--- PAGE 26 ---
#### 4.3 Design

#### 4.3.1. Use case Diagram.

##### Figure 4.3.1. use case diagram

##### 26

--- PAGE 27 ---
#### 4.3.2. Activity Diagram.

##### Figure 4.3.2.1. Activity Diagram(Use Customer Support Chatbot)

##### 27

--- PAGE 28 ---
##### Figure 4.3.2.2. Activity Diagram(generate questions to get user requirements)

##### 28

--- PAGE 29 ---
##### Figure 4.3.2.3. Activity Diagram(code generation component(agent))

##### 29

--- PAGE 30 ---
##### Figure 4.3.2.4. Activity Diagram(component(agent) flow)

##### 30

--- PAGE 31 ---
##### Figure 4.3.2.5. Activity Diagram(User Requirement Gathering)

##### 31

--- PAGE 32 ---
##### Figure 4.3.2.6. Activity Diagram(View demo)

##### 32

--- PAGE 33 ---
##### Figure 4.3.2.7. Activity Diagram(Modify user code)

##### 33

--- PAGE 34 ---
##### Figure 4.3.2.8. Activity Diagram(Create File Structure)

##### 34

--- PAGE 35 ---
##### Figure 4.3.2.9. Activity Diagram(login)

##### 35

--- PAGE 36 ---
##### Figure 4.3.2.10. Activity Diagram(signup)

##### 36

--- PAGE 37 ---
##### Figure 4.3.2.11. Activity Diagram(admin dashboard)

##### 37

--- PAGE 38 ---
##### Figure 4.3.2.12. Activity Diagram(user account management)

##### 38

--- PAGE 39 ---
##### Figure 4.3.2.13. Activity Diagram(faq)

##### 39

--- PAGE 40 ---
#### 4.3.3. Class Diagram.

##### Figure 4.3.3.class diagram

##### 40

--- PAGE 41 ---
#### 4.3.4. Sequence Diagram.

##### Figure 4.3.4.1 Sequence Diagram(User Requirement Gathering)

##### 41

--- PAGE 42 ---
##### Figure 4.3.4.2. Sequence Diagram(View demo)

##### 42

--- PAGE 43 ---
##### Figure 4.3.4.3. Sequence Diagram(Modify user code)

##### 43

--- PAGE 44 ---
##### Figure 4.3.4.5. Sequence Diagram(Use Customer Support Chatbot)

##### 44

--- PAGE 45 ---
##### Figure 4.3.4.6. Sequence Diagram(generate questions to get user requirements)

##### 45

--- PAGE 46 ---
##### Figure 4.3.4.7 Sequence Diagram(code generation component(agent))

##### 46

--- PAGE 47 ---
##### Figure 4.3.4.8. Sequence Diagram(Create File Structure)

##### 47

--- PAGE 48 ---
##### Figure 4.3.4.9. Sequence Diagram(login)

##### 48

--- PAGE 49 ---
##### Figure 4.3.4.10. Sequence Diagram(sign up)

##### 49

--- PAGE 50 ---
##### Figure 4.3.4.11. Sequence Diagram(admin dashboard)

##### 50

--- PAGE 51 ---
##### Figure 4.3.4.12. Sequence Diagram(user account management)

##### 51

--- PAGE 52 ---
#### 4.3.5 ER Diagram.

##### Figure 4.3.5.ER Diagram

##### 52

--- PAGE 53 ---
##### Figure 4.3.6. Schema Diagram

##### 53

--- PAGE 54 ---
### Chapter 5 Implementation

#### 5.1 Introduction.

##### The implementation phase of the AgentSmiths project represents a pivotal stage in the development lifecycle. Following meticulous planning and design, we embark on the journey toward realizing the envisioned solution. This chapter serves as an in-depth exploration into the intricacies of our transition from conceptualization to functional software product. Herein, the implementation process, delineate the requisite software and hardware prerequisites, and culminate with a succinct overview of our current progress will be scrutinized.

#### 5.2 Implementation process

##### 5.2.1 Implementation Progress

##### During the reporting period, significant strides were made in advancing the software project's implementation phase. Noteworthy accomplishments include the completion of the comprehensive user interface design, alongside rigorous testing of requisite functions and technologies pivotal for both front-end and back-end functionalities.
##### Specifically, a robust back-end program was developed to efficiently retrieve well-structured user requirements from a NoSQL database. This facilitated the generation of comprehensive source code for website construction. Moreover, essential front-end web pages, such as the Home, Sign Up, and Log In pages, have been successfully constructed.

##### Presently, the development efforts are concentrated on finalizing the front-end and back-end components of critical web pages within the application. Key among these are the User Chat Interface and Source Code Download page, which are anticipated to reach completion within the forthcoming two weeks.

##### Looking ahead, emphasis will be placed on implementing functionalities aimed at enhancing the efficiency and accuracy of the large language model. Additionally, efforts will be directed towards bolstering security measures, optimizing usability, and refining the overall user experience.

##### 5.2.2 Development Methodology

##### For the software project's development, an Agile methodology has been adopted to ensure adaptability and responsiveness to evolving requirements. This approach prioritizes iterative prototyping, continuous testing of features under construction, and modular design principles.

##### Regular meetings, convened every two days, serve as a cornerstone for tracking progress, allocating tasks, addressing issues, and disseminating updates among team members. These sessions provide a forum for collaborative decision-making and knowledge sharing, fostering a cohesive and informed development process.

##### Throughout the project lifecycle, a dynamic approach has been embraced, allowing for the identification and incorporation of new requirements as they emerge. Concurrently, the adoption of emerging technologies deemed more efficient has been seamlessly integrated into ongoing tasks, ensuring optimal outcomes.

##### Given the project's primary objective of delivering a functional website source code tailored to user specifications, the overarching focus remains on swiftly delivering a viable product that fulfills core requirements. Iterative development is key, enabling continual refinement and enhancement until an optimal solution is achieved.

##### To support the agile development approach, the project has been structured into three distinct phases. Phase one entails the foundational generation of source code aligned with user requirements. Subsequently, phase two involves the development of both front-end and back-end functionalities, enabling user interaction and source code generation through project agents. Finally, phase three encompasses the implementation of advanced web security measures, further refinement of user requirements to enhance agent efficiency, and the provision of a platform for users to make additional modifications to the resulting source code. This phased approach facilitates flexibility and adaptability, ensuring that the project remains responsive to evolving needs and priorities throughout its development lifecycle.

##### 5.2.3 Module or Feature Implementation

##### The software project comprises several integral components, each serving distinct functionalities. Below is a breakdown of the implementation progress for one such component:

##### Login Functionality:

##### 55

--- PAGE 56 ---
##### The Log In feature facilitates user authentication within the system. Upon initiating the Log In process, users are prompted to input their registered username and corresponding password. Subsequently, this data is transmitted to the backend server for validation against the stored user database.

##### Behind the scenes, a series of validation checks are performed. Firstly, the entered username is cross-referenced with the records in the user database. If the username provided does not correspond to any registered user, a signal is relayed to the frontend, signaling the invalidity of the username. Consequently, an informative message is displayed to the user, notifying them of the invalid entry.

##### Upon successful username validation, the system proceeds to verify the entered password against the associated account. Should the password provided fail to match the stored credentials, a signal is again transmitted to the frontend, indicating a mismatch. In such instances, users are prompted to re-enter the correct password or utilize the provided link to initiate the password recovery process, facilitating seamless user assistance.

##### This Log In functionality embodies a critical aspect of user interaction within the system, ensuring secure and efficient access to personalized accounts. Through meticulous design and implementation, it seamlessly integrates into the overarching system architecture, providing users with a streamlined authentication experience.

##### Sign Up Functionality:

##### The Sign Up feature enables new users to register and create accounts within the system. Upon initiating the Sign Up process, users are presented with a registration form where they are prompted to provide essential information such as a unique username, a valid email address, and a secure password.

##### Behind the scenes, the system conducts several validation checks to ensure the integrity and accuracy of the provided information. Firstly, the entered username is examined to ensure its uniqueness across the platform. If the chosen username is already in use, a signal is sent to the frontend, prompting the user to select an alternative username.

##### Following successful username validation, the system verifies the provided email address to ensure its validity and uniqueness within the system. If the email address is already associated with an existing account or if it does not meet the standard email format, an error message is relayed to the user, guiding them to input a valid and unique email address.

##### 56

--- PAGE 57 ---
##### Once the username and email address have been successfully validated, the system proceeds to assess the strength and security of the provided password. Password strength requirements, such as minimum length, inclusion of alphanumeric characters, and avoidance of common patterns, are enforced to enhance security. If the password provided does not meet the specified criteria, users are prompted to create a stronger password.

##### Upon successful completion of all validation checks, the user's registration details are securely transmitted to the backend server for storage in the user database. A confirmation message is then displayed to the user, indicating the successful creation of their account and providing instructions for further interaction with the system.

##### The Sign Up functionality plays a pivotal role in expanding the user base of the system while ensuring the integrity and security of user accounts. By incorporating robust validation checks and user-friendly feedback mechanisms, it facilitates a seamless and efficient registration experience for users, contributing to the overall usability and accessibility of the platform.

##### User Requirement Gathering Module:

##### The user requirement gathering module constitutes a fundamental component of the software solution's implementation process, facilitating the acquisition of essential inputs for website development. This module operates through a chat web page interface, leveraging the capabilities of the Large Language Model (LLM) to elicit comprehensive descriptions of the desired website from users.

##### Users interact with the LLM through the chat interface, providing responses that are subsequently processed and validated by a backend validator module. This validation mechanism ensures the alignment of user inputs with the posed questions, with any discrepancies flagged for clarification. Upon validation, the content undergoes a summarization process to distill it into essential information. The summarized requirements are then categorized into distinct types and stored in the database for accessibility by the LLM.

##### Throughout this iterative process, the LLM dynamically generates follow-up questions to elucidate further details until comprehensive information necessary for website construction is obtained. This meticulous approach to user requirement gathering ensures the accuracy and completeness of the gathered inputs, ultimately contributing to the successful implementation of the software solution.

##### Question Generation Module:

##### 57

--- PAGE 58 ---
##### The question generation module plays a pivotal role in eliciting comprehensive descriptions of the required website from users, thereby facilitating the user requirement gathering process. Initially, the module directs targeted questions to users to obtain an overarching understanding of the website requirements. These questions are meticulously designed to extract specific details essential for website development.

##### Subsequently, the module analyzes the summarized responses stored in the database to determine whether follow-up questions are necessary based on the completeness and clarity of the initial responses. All questions posed and raw answers exchanged during this process are securely stored in the database for backup and reference purposes.

##### This systematic approach to question generation ensures the effectiveness and accuracy of the user requirement gathering process, contributing to the successful implementation of the software solution.

##### Code Generation Module:

##### The code generation process within the software solution is orchestrated through a systematic breakdown into distinct components, each fulfilling specialized roles in the code generation pipeline.

##### 1. Product Owner: The Product Owner assumes the responsibility of analyzing user requirements and translating them into actionable user stories, providing clear guidance for subsequent development stages.

##### 2. Software Architect: The Software Architect plays a pivotal role in determining the appropriate technologies to be utilized in software development, ensuring alignment with user needs and project objectives.

##### 3. Tech Lead: Acting as a conduit between conceptualization and execution, the Tech Lead breaks down the development process into manageable tasks, fostering efficiency and clarity in the implementation phase.

##### 4. Developer: Developers leverage the task descriptions provided by the Tech Lead to implement the code, translating abstract concepts into concrete implementation strategies tailored to meet user requirements.

##### 5. Coder: Closely collaborating with developers, Coders meticulously translate the implementation descriptions into actual code, incorporating existing code components to ensure cohesion and compatibility within the software solution.

##### 58

--- PAGE 59 ---
##### Through this structured approach, the code generation module ensures a seamless transition from user requirements to tangible software components, fostering collaboration and efficiency within the development team.

##### Source Code Handling:

##### The implementation progress of the Source Code Handling feature involves the development of robust mechanisms for organizing and managing source code generated by the Large Language Model (LLM).

##### Upon generation of source code by the LLM, the File Handler module comes into play. This component is responsible for acquiring the results provided by the LLM, which may encompass various codes encapsulated within a single response. In instances where the response contains multiple codes intertwined, the File Handler module meticulously parses and separates these codes into distinct files. Moreover, some responses may include code components that require further organization into separate files or within existing files. In such cases, the File Handler module employs sophisticated algorithms to identify the optimal organization structure, ensuring coherence and efficiency in code management.

##### Through meticulous design and implementation, the File Handler module seamlessly integrates into the overall system architecture. It provides users with neatly organized and structured code files, facilitating ease of access and manipulation. By effectively managing the source code output, the Source Code Handling feature enhances the usability and functionality of the software solution, ultimately contributing to a streamlined development experience for users.

##### Website Display and Formatting Module:

##### The display of the resulting website and the application of formatting features constitute a crucial aspect of the software solution. Initially, the system employs methods such as iframes to showcase the generated web page to the user. However, exploring alternative, more efficient methods for displaying the website is paramount, potentially considering advanced technologies or frameworks tailored to enhance user experience and performance.

##### Upon entering the edit mode, users are presented with two distinct pathways for modifying the displayed website:

##### 1. AI-driven Editing: In this mode, users can submit text messages specifying desired changes to the website. These messages are then processed by the Large Language Model (LLM), which executes the necessary alterations to the existing code based on user inputs. This approach streamlines the editing process by leveraging AI capabilities to swiftly implement user-specified modifications.

##### 2. Interface-based Editing: Alternatively, users can opt for a graphical interface that facilitates direct manipulation of website elements. This interface allows users to interact with individual elements of the web page, akin to web inspection tools, enabling modifications such as text editing, color adjustments, and font changes. By providing a user-friendly interface for element selection and editing, this approach empowers users to customize the website according to their preferences seamlessly.

##### In both editing modes, the system dynamically updates the existing code based on the changes initiated by the user. By offering flexible editing options tailored to user preferences, the website display and formatting module ensures a cohesive and intuitive user experience, thereby enhancing the overall functionality and usability of the software solution.

##### Customer Support Chatbot Module:

##### The implementation of the Customer Support Chatbot module entails a sophisticated approach utilizing retrieval augmented generation techniques in conjunction with interaction with a Large Language Model (LLM) via an API. Initially, system data and descriptions are stored in a database, facilitating efficient retrieval based on user prompts. Through a similarity search mechanism, relevant data is queried from the database, and an augmented prompt is generated based on the retrieved information. This augmented prompt is then transmitted to the LLM, which generates a structured response tailored to the user's query.

##### Upon receiving the response, it is displayed to the user, providing a seamless interaction experience. Users are presented with two distinct options: engaging with the Chatbot for assistance or opting to connect with a human agent in case the responses provided by the Chatbot are deemed unsatisfactory. This dual-option approach ensures flexibility and responsiveness in addressing user queries, ultimately enhancing the overall customer support experience within the software solution.

##### User Feedback Analysis:

##### The implementation progress of the User Feedback Analysis feature involves the development of a robust system for extracting insights from user interactions with the chatbot.

##### The process begins with the collection of conversations between users and the chatbot, encompassing queries, ambiguities, and user interactions with the system. These conversations are meticulously stored in a database for subsequent analysis.

##### 60

--- PAGE 61 ---
##### Upon accumulation of sufficient data, sophisticated analytical techniques are applied to derive actionable insights. Flaws in the web application are identified, and areas for improvement are pinpointed by analyzing user queries and feedback. Furthermore, the analysis extends to identifying opportunities for enhancing system usability, optimizing service delivery, and integrating additional features to meet user needs effectively.

##### The results of the analysis are then presented to system administrators, empowering them to make informed decisions about the application's development trajectory. By leveraging user feedback as a valuable source of insight, the User Feedback Analysis feature plays a pivotal role in driving iterative improvements and enhancements within the software solution.

##### 5.2.4 Testing and Quality Assurance

##### During the implementation phase, comprehensive testing and quality assurance activities are integral to ensuring the reliability and functionality of the software solution.

##### Unit testing serves as the initial phase of testing, where developers rigorously examine each component using predefined test cases and occasionally third-party testing tools. This process ensures the individual functionalities of each module operate as intended and meet specified requirements.

##### Subsequently, integration testing and system testing are conducted to assess the interactions and functionality of integrated components. These tests are executed using predefined user personas and corresponding test cases, covering a wide range of scenarios to validate the system's performance under varying conditions.

##### For acceptance testing, a beta version of the product is released to a diverse group of selected individuals. Their feedback is meticulously collected and analyzed to identify any issues, drawbacks, or new requirements. This feedback-driven approach allows for iterative improvements and modifications to the software solution, ensuring alignment with user expectations and project objectives.

##### Throughout the testing process, any issues or bugs discovered are promptly addressed and resolved by the development team. This iterative approach to testing and quality assurance ensures the software solution meets high standards of functionality, reliability, and user satisfaction, ultimately contributing to the successful implementation and integration of individual modules and features within the overall system architecture.

##### 5.2.5 Progress Against Project Plan

##### 61

--- PAGE 62 ---
##### The implementation progress of the software solution has been continually assessed against the initial project plan or timeline, with notable deviations and adjustments observed throughout the process.

##### Initially, the project plan outlined a structured approach comprising five phases of evolutionary prototyping. However, due to delays encountered during the initial stages and time constraints, the project plan was adapted to streamline the process, resulting in a reduction to three phases. Despite this adjustment, progress remained aligned with project objectives, albeit with modified timelines to accommodate the revised scope.

##### Throughout the implementation journey, enhancements to the project scope were introduced, including the integration of additional features such as a customer support chatbot and a support agent with human intervention capabilities. Furthermore, functionalities such as FAQ analysis through chatbot conversations and leveraging analyzed data to suggest system improvements to administrators were incorporated, necessitating adjustments to the project plan to accommodate these enhancements.

##### In response to evolving requirements and the need for enhanced efficiency, modifications to the system architecture and component relationships were implemented. These changes were meticulously orchestrated to optimize system processes and align with project objectives effectively.

##### Additionally, measures were undertaken to enhance the accuracy and efficiency of the Large Language Model (LLM) outputs. This involved subdividing the LLM workload into separate agents and refining response generation by categorizing responses based on the type of information required. Furthermore, to improve the quality of output, the LLM was empowered to direct clarifying questions to users dynamically, based on the required information, deviating from the initial plan where questions were predefined during development.

##### Overall, deviations from the initial project plan were managed effectively through proactive adjustments, ensuring continued progress towards project milestones and objectives while accommodating evolving requirements and challenges encountered during implementation.

##### 5.2.6 Resource Allocation and Management

##### The tasks and functionalities within the system are organized into three distinct categories: User Interface Building, Database Handling, and AI Technologies.

##### 62

--- PAGE 63 ---
##### User Interface Building: This facet entails the development of user interfaces utilizing front-end technologies and libraries. Through meticulous design and implementation, intuitive and visually appealing interfaces are crafted to enhance user interaction and experience.

##### Database Handling: Central to the system's functionality is the adept handling of databases. This involves the processes of accessing and executing various database operations, ensuring seamless data management and retrieval.

##### AI Technologies: Leveraging cutting-edge AI technologies, this aspect encompasses a spectrum of tasks aimed at optimizing user experience and system functionality. These tasks include the analysis of web user behavior, refinement of user requirements, automated generation of website source codes, extraction and organization of code segments into distinct files, and dynamic modification of source code based on user requests.

##### To ensure a balanced distribution of workload and efficient task management, each team member is assigned tasks spanning across all three functional categories. This approach fosters collaboration and cross-disciplinary expertise, maximizing productivity and innovation within the team.

##### In managing tasks and tracking progress, the team utilizes GIT for version control and project management. GIT enables seamless collaboration, facilitates code integration, and provides a robust framework for managing project timelines and milestones.

##### New tasks arising from emerging challenges or evolving requirements are meticulously documented and added to the GIT project backlog. These tasks are then prioritized and assigned to team members based on their expertise and availability, ensuring a dynamic response to changing project needs while maintaining equitable distribution of responsibilities. Through this iterative and adaptive approach, the team effectively navigates complexities and drives progress towards project goals.

##### 5.2.7 Collaboration and Communication

##### During the implementation phase, effective collaboration and communication processes were established among key stakeholders, including the development team, RootCode supervisor, academic supervisor, project mentor, and prospective system users.

##### Development Team Communication: Team members engaged in regular stand-up meetings and discussions every two days to synchronize efforts, address challenges, and share updates. Additionally, communication channels such as Google Meet discussions and WhatsApp calls facilitated real-time discussions and information sharing. WhatsApp group communities were utilized to maintain ongoing communication and share relevant reference materials.

##### RootCode Supervisor Engagement: Weekly meetings with the RootCode supervisor were conducted via Google Meet every Saturday. These sessions provided an opportunity to provide concise updates on project progress, discuss upcoming tasks, and address any concerns or challenges encountered.

##### Academic Supervisor Updates: The academic supervisor was kept informed about project progress, task allocation, and other relevant details through Google Meet sessions. Regular updates ensure alignment with academic requirements and provide opportunities for guidance and feedback.

##### Project Mentor Communication: Communication with the project mentor was facilitated through brief calls and a dedicated WhatsApp group chat. This platform served as a channel for directing questions, sharing updates, and exchanging reference materials, fostering a collaborative environment for mentorship and support.

##### User Engagement: Prospective system users are being engaged during testing phases of the application. Their feedback and insights are being incorporated to ensure the system meets user needs and expectations, contributing to the overall quality and usability of the software solution.

##### By fostering open communication and collaboration among stakeholders, the implementation phase progressed smoothly, enabling efficient decision-making, progress tracking, and alignment with project objectives.

##### 5.2.8 Risk Mitigation Strategies

##### Throughout the implementation process, one of the identified risks pertains to the uncertainty surrounding the availability and cost of the Gemini API, which is integral to the system. To mitigate this risk, proactive measures are being implemented to ensure adaptability and flexibility within the software solution.

##### A primary mitigation strategy involves designing the project's codes and components with modularity in mind, independent of specific technologies. By adhering to modular design principles, the system remains resilient to potential changes in LLM availability or cost. Should the Gemini API become inaccessible or incur fees, the system can seamlessly transition to an alternative LLM, minimizing disruption to functionality.

##### 64

--- PAGE 65 ---
##### Furthermore, given the complexity and variability inherent in the implementation process and system architecture, each component is being developed with modularity. This modular approach enables the swift replacement, modification, or removal of components with minimal impact on related modules. Additionally, the choice of MongoDB as the database solution further mitigates risks associated with third-party server dependencies, ensuring system stability and continuity.

##### By implementing these strategies, the project aims to mitigate the risks posed by external factors such as changes in LLM availability or cost, while fostering adaptability and resilience within the software solution's architecture.

##### 5.2.9 Future Plans and Next Steps

##### As the project progresses through the Agile development lifecycle, the current focus lies within Phase two, encompassing pivotal functionalities such as user sign up, log in, interaction with the large language model, implementation of code generation, and presentation of formattable outputs along with the provision of downloadable source code files.

##### Looking ahead to the subsequent phase, emphasis will shift towards addressing non-functional requirements to further enhance the system's robustness. Key areas of focus include bolstering security measures, optimizing the efficiency and accuracy of the large language model, and refining user interactions to enhance overall usability.

##### Following deployment, the project roadmap outlines a trajectory informed by data analysis of user feedback. Insights gleaned from this analysis will inform subsequent enhancements, including the integration of multi-usability features, automated generation of company logos, and expanded functionality such as source code generation via image inputs and user website back-end implementation.

##### Additionally, plans include the integration of user website hosting services directly within the application, providing a comprehensive solution for users seeking to deploy and manage their websites seamlessly.

##### Through an iterative approach guided by Agile principles, the project aims to continually evolve and adapt to meet the dynamic needs of users, ensuring ongoing innovation and value delivery in line with project objectives.

#### 5.3 Software, Hardware

##### Software:

##### 65

--- PAGE 66 ---
##### For the frontend development of our software application, we rely on a comprehensive suite of technologies. ReactJS serves as the foundation, complemented by Style Components and Material UI for enhanced styling and user interface design. We leverage routing libraries and APIs to facilitate seamless navigation and interaction within the application. On the backend, we employ cutting-edge technologies such as FastAPI and LangChain to implement robust server-side logic and integrate advanced functionalities. As our development progresses, we remain open to integrating additional technologies to meet evolving requirements. For data storage and retrieval, MongoDB NoSQL web services play a pivotal role, ensuring flexible and efficient management of data resources.

##### Hardware:

##### The hardware infrastructure supporting our software application is designed for optimal performance and scalability across various devices. Our application is engineered to operate seamlessly on a wide range of devices, including personal computers, laptops, and mobile phones. Each device is equipped with the necessary capabilities to support the application's functionalities effectively. Whether accessed from a desktop workstation or a handheld device, users can expect a consistent and responsive experience, thanks to our carefully optimized hardware configuration.

#### 5.8 Summary

##### The implementation phase of the AgentSmiths project marks a significant milestone in our journey towards realizing a functional and user-centric software solution. Throughout this phase, we have made substantial progress in advancing the development of both frontend and backend components, bringing us closer to our goal of delivering a comprehensive website source code generation platform.

##### In terms of implementation progress, significant strides have been made in completing the user interface design and testing essential functionalities critical for both frontend and backend operations. Notably, the development of a robust backend program has enabled efficient retrieval of user requirements from a NoSQL database, facilitating the generation of comprehensive source code for website construction. Moreover, essential front-end web pages, including Home, Sign Up, and Login pages, have been successfully constructed.

##### Moving forward, our development efforts are concentrated on finalizing critical web pages' front-end and back-end components, such as the User Chat Interface and Source Code Download page. These components are expected to reach completion within the forthcoming two weeks, further enhancing the platform's functionality and usability.

##### 66

--- PAGE 67 ---
##### Our development methodology, grounded in Agile principles, has been instrumental in ensuring adaptability and responsiveness to evolving requirements. Regular meetings and collaboration sessions have served as a cornerstone for tracking progress, addressing issues, and fostering a cohesive development process. Moreover, a dynamic approach has allowed us to identify and incorporate new requirements and emerging technologies seamlessly, ensuring optimal outcomes.

##### The software solution comprises several integral components, each serving distinct functionalities. These include functionalities such as Login and Sign Up features, User Requirement Gathering Module, Code Generation Module, and Website Display and Formatting Module. The meticulous implementation of these components ensures a seamless user experience and robust functionality across the platform.

##### Testing and quality assurance activities have been integral to ensuring the reliability and functionality of the software solution. Unit testing, integration testing, and system testing have been conducted rigorously to validate the system's performance under various conditions. Additionally, acceptance testing involving beta releases to selected users has provided valuable feedback for iterative improvements.

##### In terms of resource allocation and management, a balanced distribution of workload across User Interface Building, Database Handling, and AI Technologies categories has been ensured. Collaborative tools such as GIT for version control and project management have facilitated efficient task management and progress tracking.

##### Effective collaboration and communication among stakeholders, including the development team, supervisors, mentors, and prospective users, have been vital throughout the implementation phase. Regular meetings, communication channels, and user engagement initiatives have fostered a collaborative environment conducive to project success.

##### In addressing potential risks, proactive mitigation strategies have been implemented to ensure adaptability and resilience within the software solution's architecture. Modular design principles and flexibility in technology choices serve as safeguards against uncertainties such as changes in third-party APIs' availability or cost.

##### Looking ahead, the focus will shift towards addressing non-functional requirements, enhancing system robustness, and integrating user feedback-driven enhancements. Plans include the integration of multi-usability features, automated generation of company logos, and expanded functionality for source code generation via image inputs. Through an iterative approach guided by Agile principles, the project aims to continually evolve and adapt to meet the dynamic needs of users, ensuring ongoing innovation and value delivery.

##### In summary, the implementation phase of the AgentSmiths project has been characterized by significant achievements, effective collaboration, and proactive risk management. As we proceed towards the next phase, we remain committed to delivering a high-quality software solution that meets the needs and expectations of our users while adhering to project objectives and timelines.

##### 68

--- PAGE 69 ---
### Chapter 7 Appendix - An Individual Contribution

##### Index No : 215542N Name : Perera LVV

##### Front-end Developments :

* ##### ChatBot

* ##### Support Page

* ##### Support Agent Interface

##### Database Handling :

* ##### Storing customer support chatBot conversations.

* ##### Storing FAQs.

* ##### RAG operations.

##### AI Technologies :

* ##### Generating Source Code

* ##### ChatBot LLM Configuration

* ##### Generating Questions

##### Other Contributions :

* ##### Research AI Technologies

* ##### Team Management

##### Index No : 215515K Name : Basnayake BMGD

##### Front-end Developments :

* ##### Home Page

* ##### Chat Interface

##### Database Handling :

* ##### Storing questions and user responses

* ##### Storing summarized data

##### AI Technologies :

* ##### Validating responses

* ##### Summarizing responses

* ##### Categorizing responses

##### Other Contributions :

* ##### UI Designing

##### 69

--- PAGE 70 ---
#####

* ##### Project management

* ##### Database management

##### Index No : 215525P Name : Gayashan WJ

##### Front-end Developments :

* ##### File Download Page

##### Database Handling :

* ##### Utilize databases to organize code files

* ##### Store code files

##### AI Technologies :

* ##### AI technologies to organize code segments

##### Other Contributions :

* ##### Research back-end technologies

##### Index No : 215509V Name : Asarak A

##### Front-end Developments :

* ##### Sign Up

* ##### Log In

* ##### User Profile

##### Database Handling :

* ##### User database handling

* ##### Accessing customer support chatBot conversations

##### AI Technologies :

* ##### Analyzing customer support chatBot conversations

* ##### Predicting future modifications

##### Other Contributions :

* ##### UI Designing

* ##### Overseeing UI standards and principles

##### Index No : 215558T Name : Senavirathna SRMSRB

##### 70

--- PAGE 71 ---
##### Front-end Developments :

* ##### Source Code Result Preview

##### Database Handling :

* ##### Access code files

##### AI Technologies :

* ##### Utilizing AI technologies to modify source code

##### Other Technologies :

* ##### Using complex front-end technologies to modify source code

##### Other Contributions :

* ##### Overseeing UI principles

* ##### Research on real time code formatting and displaying

##### 71

--- END OF PDF CM 2900 – interim report group 12.pdf ---